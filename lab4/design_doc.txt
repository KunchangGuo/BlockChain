设计文档 
2012522 郭坤昌 计算机科学与技术

### coinExchangeScript工作原理

`coinExchangeScript`是对交换交易还是返还交易的确认，对应如下两种情况：

1. 对交换交易的确认：设计为需要收款方的签名和秘密可赎回，对应于`coinExchangeScriptSig1`。Bob对Alice交换交易的赎回需要秘密和自己的签名，而Alice赎回Bob的交换交易时只需要自己的签名，因此为了简便，这里在赎回交换交易时，均对自己（收款方）的签名和秘密进行确认。

def coinExchangeScriptSig1(sig_recipient, secret):
    return [
        sig_recipient, 
        secret
    ]

2. 对返还交易的确认：设计为需要付款方的签名，对应于`coinExchangeScriptSig2`。

def coinExchangeScriptSig2(sig_sender, sig_recipient):
    return [
        sig_sender
    ]

因此，在确认时，首先将栈顶元素与$H(x)$进行比较，若相等，则为秘密，进入第一种情况的进一步确认；否则进一步确认是否为第二种情况。这样，`coinExchangeScript`实现如下：

def coinExchangeScript(public_key_sender, public_key_recipient, hash_of_secret):
    return [
        OP_DUP,                 # 复制栈顶元素
        OP_HASH160,             # 对栈顶元素进行hash160
        hash_of_secret,         # 将秘密的哈希压入栈顶
        OP_EQUAL,               # 比较是与秘密相等
        OP_IF,                  # 如果为秘密
        OP_DROP,                # 弹出栈顶多余的元素
        public_key_recipient,	# 接将收款方公钥压栈，验证收款方的签名
        OP_ELSE,                # 否则，验证是否为返还交易
        public_key_sender,      # 将付款方的公钥压入栈顶 
        OP_ENDIF,               # 结束分支判断
        OP_CHECKSIG             # 验证签名
    ]

| 步骤 | 操作                 | 解释                                                         |
| ---- | -------------------- | ------------------------------------------------------------ |
| 1    | OP_DUP               | 复制栈顶元素                                                 |
| 2    | OP_HASH160           | 对栈顶元素执行Hash160计算，结果记为$H(top)$                  |
| 3    | hash_of_secret       | 将$H(x)$压栈                                                 |
| 4    | OP_EQUAL             | 比较$H(top)$与$H(x)$是否相等。若相等则原栈顶元素为$x$，OP_EQUAL返回1，对应于对交换交易的解锁，接下来执行OP_DROP弹出多余$x$，将收款方公钥压栈，验证收款方签名；否则OP_EQUAL返回0，对应于对返还交易的解锁，将付款方公钥压栈，验证付款方签名。 |
| 5    | OP_IF                | 当栈顶元素不为OP_FALSE时，执行接下来的语句；否则执行OP_ELSE后的语句 |
| 6    | OP_DROP              | 弹出多余的$x$                                                |
| 7    | public_key_recipient | 将收款方公钥压栈                                             |
| 8    | OP_ELSE              | OP_EQUAL返回0，执行接下来的语句                              |
| 9    | public_key_sender    | 将付款方公钥压栈                                             |
| 10   | OP_ENDIF             | 必须应用此OP_CODE，以结束IF语句                              |
| 11   | OP_CHECKSIG          | 验证压栈的公钥是否符合签名。若验证收款方成功，则交换交易成功；若验证付款方成功，则收款交易成功；否则，签名错误，交易不成功。 |

### 以 Alice 用 coinExchangeScript 向 Bob 发送硬币为例：如果 Bob 不把钱赎回来，Alice 为什么总能拿回她的钱？为什么不能用简单的 `1/2 multisig` 来解决这个问题？

若Bob没有在Alice创建的自动返还比特币交易上签名，则Alice不能获得Bob的签名，并在解锁Bob的交换交易后告知秘密，这样Bob就不能赎回Alice创建的交换交易，当超过48小时后，Alice将会自动拿回她的钱。

若使用 `1/2 multisig`，则可以使用任意一方的签名将交易赎回，可能出现一方将两份UTXO均赎回，不能保证在没有互信和第三方的情况下交换一定成功。

### Alice和Bob创建的交易内容和先后次序，以及背后设计的原理

该实验中原子交换的原理简述：围绕只有Alice知道的秘密$x$进行，只广播$H(x)$。如果$x$被透露，那么他们都能赎回对方发送来的货币；如果$x$没有被透露，那么他们都能赎回自己发送的货币，而不需要对方的帮助。

交易过程为：

| 步骤 | 详细                                                         |
| ---- | ------------------------------------------------------------ |
| 1    | Alice根据秘密，使用哈希加密，生成tx1：支付$w$ 比特币（BTC-test） 给Bob的公钥，如果$x$已知并由Bob签名，或Alice和Bob共同签名 |
| 2    | Alice创建tx2，：从tx1支付$w$比特币到Alice的公钥，并在未来48小时内锁定，由Alice签名。若Bob不赎回tx1，这是Alice可以自动将比特币发回的交易 |
| 3    | Alice发送tx2给Bob                                            |
| 4    | Bob对tx2进行签名并返回给Alice                                |
| 5    | Alice获得Bob的签名，向网络广播tx1                            |
| 6    | Bob创建tx3：若$H(x)$的$x$已知并由Alice签名，或由Alice和Bob共同签名，则将$v$ 比特币（BCY）支付给Alice的公钥 |
| 7    | Bob创建tx4：从tx3支付$v$比特币到Bob的公钥，并在未来24小时内锁定，由Bob签名。若Alice不赎回tx3，这是Bob可以自动将比特币发回的交易 |
| 8    | Bob发送tx4给Alice                                            |
| 9    | Alice对tx4签名并返回给Bob                                    |
| 10   | Bob获得Alice的签名，向网络广播tx3                            |
| 11   | Alice赎回tx3，同时将该赎回交易广播，$x$被Bob得知             |
| 12   | Bob使用$x$和自己的签名赎回tx1，该赎回交易被广播              |

交易过程图示如下：（图源：[区块链世界的圣杯----原子互换（Atomic Swaps）技术](https://www.jianshu.com/p/242ef75e18be)）

![img](https://upload-images.jianshu.io/upload_images/16319200-51355214fd399e1f.jpg?imageMogr2/auto-orient/strip|imageView2/2/w/649/format/webp)

### 成功跨链原子交换中，资金的流转

这里通过详细步骤进行说明

| 步骤 | 详细                                                         | 资金流转                                             |
| ---- | ------------------------------------------------------------ | ---------------------------------------------------- |
| 1    | Alice根据秘密，使用哈希加密，生成tx1：支付$w$ 比特币（BTC-test） 给Bob的公钥，如果$x$已知并由Bob签名，或Alice和Bob共同签名 | tx1含有的$w$个比特币属于Alice                        |
| 2    | Alice创建tx2，：从tx1支付$w$比特币到Alice的公钥，并在未来48小时内锁定，由Alice签名。若Bob不赎回tx1，这是Alice可以自动将比特币发回的交易 |                                                      |
| 3    | Alice发送tx2给Bob                                            |                                                      |
| 4    | Bob对tx2进行签名并返回给Alice                                |                                                      |
| 5    | Alice获得Bob的签名，向网络广播tx1                            |                                                      |
| 6    | Bob创建tx3：若$H(x)$的$x$已知并由Alice签名，或由Alice和Bob共同签名，则将$v$ 比特币（BCY）支付给Alice的公钥 | tx3含有的$v$个比特币属于Bob                          |
| 7    | Bob创建tx4：从tx3支付$v$比特币到Bob的公钥，并在未来24小时内锁定，由Bob签名。若Alice不赎回tx3，这是Bob可以自动将比特币发回的交易 |                                                      |
| 8    | Bob发送tx4给Alice                                            |                                                      |
| 9    | Alice对tx4签名并返回给Bob                                    |                                                      |
| 10   | Bob获得Alice的签名，向网络广播tx3                            |                                                      |
| 11   | Alice赎回tx3，同时将该赎回交易广播，$x$被Bob得知             | Alice赎回tx3中的比特币，此时其中$v$个比特币属于Alice |
| 12   | Bob使用$x$和自己的签名赎回tx1，该赎回交易被广播              | Bob赎回tx1中的比特币，此时其中$w$个比特币属于Bob     |
